var workWithJson=function(){"use strict";const e=async(e,t)=>{const s=document.createElement("div"),i=document.createElement("button"),n=document.createElement("button"),d=document.createElement("p"),l=document.createElement("form"),a=document.getElementsByTagName("body")[0];s.classList.add("position-center","box-column"),n.classList.add("form-add-btn"),i.classList.add("form-add-btn"),d.innerHTML="Are you sure to delete?",i.innerHTML="Ok",n.innerHTML="Close",s.appendChild(d),s.appendChild(l),l.appendChild(i),l.appendChild(n),document.getElementsByTagName("body")[0].appendChild(s),a.classList.toggle("is-dont-point-event"),l.addEventListener("submit",i=>{i.preventDefault();const n=document.querySelectorAll("tr");for(let s=1;s<=n.length-1;s++)e?n[s].id===e&&(t.unshift(n[s].id),n[s].remove()):n[s].children[0].children[0].checked&&(t.unshift(n[s].id),n[s].remove());s.remove(),a.classList.toggle("is-dont-point-event"),document.querySelector("#checkbox-main").checked=!1}),n.addEventListener("click",()=>{s.remove(),a.classList.toggle("is-dont-point-event")})},t=(e,t)=>{const s=document.getElementById("window-info"),i=document.createElement("h2");s.innerHTML="",i.innerHTML="Portfolio",i.className="modal-title",s.appendChild(i),s.classList.contains("is-show-info")||s.classList.add("is-show-info");const n=t.find(t=>{if(t.id==e)return t});for(let e in n)if("adress"==e)for(let t in n[e]){let i=document.createElement("p");i.innerHTML=`<b>${t.toUpperCase()}</b>: ${n[e][t]}`,s.appendChild(i)}else{let t=document.createElement("p");t.innerHTML=`<b>${e.toUpperCase()}</b>: ${n[e]}`,s.appendChild(t)}s.addEventListener("click",()=>{s.classList.remove("is-show-info")})},s=document.getElementById("main-trash"),i=document.getElementById("list-nav-table"),n=n=>{const d=document.getElementById("table-list");if(d.getElementsByTagName("tr").length>=1){const e=document.querySelectorAll("tr"),t=e.length-1,s=i.children.length-1;for(let s=t;s>=1;s--)e[s].remove();for(let e=s;e>=1;e--)e!=s&&i.children[e].remove()}for(let i=0;i<=(Array.isArray(n)?n.length-1:0);i++){let l=0;const a=document.createElement("tr");let c=Array.isArray(n)?Object.values(n[i]):Object.values(n);const r=document.createElement("td"),o=document.createElement("td"),h=document.createElement("td"),m=document.createElement("td"),g=document.createElement("td"),u=document.createElement("td"),L=document.createElement("td"),f=document.createElement("button"),p=document.createElement("td"),v=document.createElement("input"),E=document.createElement("label");v.setAttribute("type","checkbox"),v.classList.add("checkbox-table"),f.innerHTML='<i class="fas fa-trash"></i>',f.classList.add("table-btn","table-btn-delete");for(let e in Array.isArray(n)?n[i]:n)"id"===e?(a.setAttribute("id",""+c[l]),r.innerHTML=c[l]):"firstName"===e?(o.innerHTML=c[l],v.setAttribute("id",""+c[l]),v.setAttribute("firstName",""+l),E.setAttribute("for",""+c[l])):"lastName"===e?h.innerHTML=c[l]:"email"===e?m.innerHTML=c[l]:"phone"===e?g.innerHTML=c[l]:"adress"===e&&(u.innerHTML=c[l].state),l++;i>19&&a.classList.toggle("is-hidden-td"),L.appendChild(f),p.appendChild(v),p.appendChild(E),a.appendChild(p),a.appendChild(r),a.appendChild(o),a.appendChild(h),a.appendChild(m),a.appendChild(g),a.appendChild(u),a.appendChild(L),d.insertBefore(a,d.children[i+1]),p.addEventListener("change",()=>{const e=document.querySelectorAll("tr");let t=[];for(let s=1;s<=e.length-1;s++)t.push(e[s].children[0].children[0].checked);t.every(e=>1==e)?e[0].children[0].children[0].checked=!0:e[0].children[0].children[0].checked=!1,t.some(e=>1==e)&&!s.classList.contains("id-disabled")?s.classList.remove("is-disabled"):s.classList.add("is-disabled")}),f.addEventListener("click",t=>{"TR"===t.path[3].tagName?e(t.path[3].id,n):e(t.path[2].id,n)}),a.addEventListener("click",e=>{if("I"!=e.target.tagName&&"LABEL"!=e.target.tagName&&"INPUT"!=e.target.tagName){const e=document.getElementsByTagName("main")[0].offsetHeight,s=document.getElementById("window-info").offsetHeight;window.scroll(0,e+s),t(a.id,n)}})}(async e=>{let t=1;for(let s=0;s<=(Array.isArray(e)?e.length-1:0);s++){const e=document.createElement("li");s%20==0&&(e.classList.add("nav-item"),e.innerHTML=t,e.id="item-"+t,1==t&&e.classList.add("is-active-item"),i.children[t].insertAdjacentElement("beforebegin",e),t++,e.addEventListener("click",e=>{const t=e.target.id.toString().slice(-1),s=document.querySelectorAll("tr");if(i.children.length>3){for(let e=0;e<=i.children.length-1;e++)i.children[e].classList.remove("is-active-item"),e==t&&i.children[t].classList.add("is-active-item");for(let e=1;e<=s.length;e++)if(s[0].classList.contains("is-hidden-td")&&s[0].classList.toggle("is-hidden-td"),e>=20*t&&e<=20*t+19&&1!=t?(s[e-1].classList.add("is-hidden-td"),s[e-1].classList.remove("is-hidden-td")):s[e-1].classList.contains("is-hidden-td")||s[e-1].classList.toggle("is-hidden-td"),1==t)for(let e=0;e<=19;e++)s[e+1].classList.add("is-hidden-td"),s[e+1].classList.remove("is-hidden-td")}}))}})(n)},d=(e,t,s)=>t.filter((function(t){return"adress"==s?t[s].state.toLowerCase().indexOf(e.toLowerCase())>-1:t[s].toLowerCase().indexOf(e)>-1})),l=(e,t,s)=>{let i=t.sort((function(t,i){return 2==s?"state"==e?t.adress.state<i.adress.state?-1:t.adress.state>i.adress.state?1:0:t[e]<i[e]?-1:t[e]>i[e]?1:0:3==s?"state"==e?t.adress.state>i.adress.state?1:t.adress.state<i.adress.state?-1:0:t[e]<i[e]?1:t[e]>i[e]?-1:0:void 0}));n(i)},a=document.getElementById("filter-firstName"),c=document.getElementById("selector-state"),r=document.getElementById("main-trash"),o=document.getElementById("list-nav-table"),h=document.querySelectorAll(".is-sort");let m=2;const g=document.getElementById("selector-state"),u=async t=>{try{await fetch("https://itrex-react-lab-files.s3.eu-central-1.amazonaws.com/react-test-api.json").then(e=>e.json()).then(t=>{n(t),(async t=>{a.addEventListener("input",e=>{const s=e.target.value;n(d(s.toLowerCase(),t,"firstName"))}),c.addEventListener("change",e=>{const s=e.target.value;let i=[];"Nothing"!=e.target.value?(i=d(s,t,"adress"),n(i)):n(t)}),r.addEventListener("click",()=>{const t=document.querySelectorAll("tr");let s=[],i=[];for(let e=1;e<=t.length-1;e++)s.push(t[e].children[0].children[0].checked),t[e].children[0].children[0].checked&&i.push(t[e].id);s.some(e=>1==e)&&e(void 0,i)}),document.querySelector("#checkbox-main").addEventListener("click",e=>{const t=document.querySelectorAll("tr");e.path[0].checked?(t.forEach(e=>{e.classList.contains("is-hidden-td")||(e.children[0].children[0].checked=!0)}),r.classList.remove("is-disabled")):(t.forEach(e=>e.children[0].children[0].checked=!1),r.classList.add("is-disabled"))}),o.children[o.children.length-1].addEventListener("click",()=>{let e;if(o.children.length>3){for(let t=0;t<=o.children.length-1;t++){if(o.children[o.children.length-2].classList.contains("is-active-item")){e=o.children[o.children.length-2].id.toString().slice(-1);break}o.children[t].classList.contains("is-active-item")&&(e=t+1)}for(let t=0;t<=o.children.length-1;t++)o.children[t].classList.remove("is-active-item"),t==e&&o.children[e].classList.add("is-active-item");for(let s=0;s<=t.length-1;s++)if(s%20==0){const t=document.querySelectorAll("tr");for(let t=0;t<=o.children.length-1;t++)o.children[t].classList.remove("is-active-item"),t==e&&o.children[e].classList.add("is-active-item");for(let s=1;s<=t.length;s++)if(t[0].classList.contains("is-hidden-td")&&t[0].classList.toggle("is-hidden-td"),s>=20*e&&s<=20*e+19&&1!=e?(t[s-1].classList.add("is-hidden-td"),t[s-1].classList.remove("is-hidden-td")):t[s-1].classList.contains("is-hidden-td")||t[s-1].classList.toggle("is-hidden-td"),1==e)for(let e=0;e<=4;e++)t[e+1].classList.add("is-hidden-td"),t[e+1].classList.remove("is-hidden-td")}}}),o.children[0].addEventListener("click",()=>{let e;if(o.children.length>3){for(let t=0;t<=o.children.length-1;t++){if(o.children[1].classList.contains("is-active-item")){e=o.children[1].id.toString().slice(-1);break}o.children[t].classList.contains("is-active-item")&&(e=t-1)}for(let t=0;t<=o.children.length-1;t++)o.children[t].classList.remove("is-active-item"),t==e&&o.children[e].classList.add("is-active-item");for(let s=0;s<=t.length-1;s++)if(s%20==0){const t=document.querySelectorAll("tr");for(let t=0;t<=o.children.length-1;t++)o.children[t].classList.remove("is-active-item"),t==e&&o.children[e].classList.add("is-active-item");for(let s=1;s<=t.length;s++)if(t[0].classList.contains("is-hidden-td")&&t[0].classList.toggle("is-hidden-td"),s>=20*e&&s<=20*e+19&&1!=e?(t[s-1].classList.add("is-hidden-td"),t[s-1].classList.remove("is-hidden-td")):t[s-1].classList.contains("is-hidden-td")||t[s-1].classList.toggle("is-hidden-td"),1==e)for(let e=0;e<=19;e++)t[e+1].classList.add("is-hidden-td"),t[e+1].classList.remove("is-hidden-td")}}}),h.forEach(e=>{e.addEventListener("click",s=>{const i=s.currentTarget.innerHTML;let n=i.charAt(0).toLowerCase()+i.substring(0,i.indexOf("<")).slice(1).replace(/\s/g,"");h.forEach(e=>{(e.getElementsByTagName("i")[0].classList.contains("fa-arrow-up")||e.getElementsByTagName("i")[0].classList.contains("fa-arrow-down"))&&(e.getElementsByTagName("i")[0].className="fas")}),4==m||1==m?(u(),m=2):3==m?(e.getElementsByTagName("i")[0].className="fas fa-arrow-up",l(n,t,m),m++):2==m&&(l(n,t,m),m++,e.getElementsByTagName("i")[0].className="fas fa-arrow-down")})})})(t),(async e=>{const t=[];for(let s=0;s<=e.length-1;s++)for(let i in e[s])"adress"==i&&(t.includes(e[s][i].state)||t.push(e[s][i].state));t.forEach(e=>{let t=document.createElement("option");t.innerHTML=e,g.appendChild(t)});let s=document.createElement("option");s.innerHTML="Nothing",g.prepend(s),g.value="Nothing"})(t)})}catch(e){console.log(e)}};return u}();

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid29ya1dpdGhKU09OLmpzIiwic291cmNlcyI6WyJzcmMvanMvbW9kYWxXaW5kb3dRdWVzdGlvbi5qcyIsInNyYy9qcy9tb2RhbFdpbmRvd0luZm8uanMiLCJzcmMvanMvcmVuZGVyUGFnZXMuanMiLCJzcmMvanMvc2VhcmNoRnJvbUZpbHRlci5qcyIsInNyYy9qcy9zb3J0TGlzdFRhYmxlLmpzIiwic3JjL2pzL2xpc3RlbmVycy5qcyIsInNyYy9qcy9maWxsaW5nU2VsZWMuanMiLCJzcmMvanMvd29ya1dpdGhKU09OLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vZnVuY3Rpb24gY3JlYXRpbmcgbmV3IG1vZGFsIHdpbmRvdyBmcm9tIGFza2luZyBhIHF1ZXN0aW9uLy9cclxuY29uc3QgY3JlYXRlTW9kYWxXaW5kb3dGb3JRdWVzdGlvbiA9IGFzeW5jIChpZCwgYXJyKSA9PiB7XHJcbiAgY29uc3QgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JyksXHJcbiAgICBidG5PayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpLFxyXG4gICAgYnRuQ2xvc2UgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKSxcclxuICAgIHBGb3JEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyksXHJcbiAgICBmb3JtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZm9ybScpLFxyXG4gICAgYm9keSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdib2R5JylbMF1cclxuXHJcbiAgZGl2LmNsYXNzTGlzdC5hZGQoJ3Bvc2l0aW9uLWNlbnRlcicsICdib3gtY29sdW1uJylcclxuICBidG5DbG9zZS5jbGFzc0xpc3QuYWRkKCdmb3JtLWFkZC1idG4nKVxyXG4gIGJ0bk9rLmNsYXNzTGlzdC5hZGQoJ2Zvcm0tYWRkLWJ0bicpXHJcblxyXG4gIHBGb3JEaXYuaW5uZXJIVE1MID0gJ0FyZSB5b3Ugc3VyZSB0byBkZWxldGU/J1xyXG4gIGJ0bk9rLmlubmVySFRNTCA9ICdPaydcclxuICBidG5DbG9zZS5pbm5lckhUTUwgPSAnQ2xvc2UnXHJcblxyXG4gIGRpdi5hcHBlbmRDaGlsZChwRm9yRGl2KVxyXG4gIGRpdi5hcHBlbmRDaGlsZChmb3JtKVxyXG4gIGZvcm0uYXBwZW5kQ2hpbGQoYnRuT2spXHJcbiAgZm9ybS5hcHBlbmRDaGlsZChidG5DbG9zZSlcclxuXHJcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2JvZHknKVswXS5hcHBlbmRDaGlsZChkaXYpXHJcbiAgYm9keS5jbGFzc0xpc3QudG9nZ2xlKCdpcy1kb250LXBvaW50LWV2ZW50JylcclxuXHJcbiAgZm9ybS5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCAoZSkgPT4ge1xyXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpXHJcblxyXG4gICAgY29uc3QgdGFibGVBbGxUUiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ3RyJylcclxuXHJcbiAgICAvL2RlbGV0ZSB1bm5lY2Vzc2FyeSBUUi8vXHJcbiAgICBmb3IgKGxldCBpID0gMTsgaSA8PSB0YWJsZUFsbFRSLmxlbmd0aCAtIDE7IGkrKykge1xyXG4gICAgICBpZiAoaWQpIHtcclxuICAgICAgICBpZiAodGFibGVBbGxUUltpXS5pZCA9PT0gaWQpIHtcclxuICAgICAgICAgIGFyci51bnNoaWZ0KHRhYmxlQWxsVFJbaV0uaWQpXHJcbiAgICAgICAgICB0YWJsZUFsbFRSW2ldLnJlbW92ZSgpXHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2UgaWYgKHRhYmxlQWxsVFJbaV0uY2hpbGRyZW5bMF0uY2hpbGRyZW5bMF0uY2hlY2tlZCkge1xyXG4gICAgICAgIGFyci51bnNoaWZ0KHRhYmxlQWxsVFJbaV0uaWQpXHJcbiAgICAgICAgdGFibGVBbGxUUltpXS5yZW1vdmUoKVxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZGl2LnJlbW92ZSgpXHJcbiAgICBib2R5LmNsYXNzTGlzdC50b2dnbGUoJ2lzLWRvbnQtcG9pbnQtZXZlbnQnKVxyXG5cclxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNjaGVja2JveC1tYWluJykuY2hlY2tlZCA9IGZhbHNlXHJcbiAgfSlcclxuXHJcbiAgYnRuQ2xvc2UuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcbiAgICBkaXYucmVtb3ZlKClcclxuICAgIGJvZHkuY2xhc3NMaXN0LnRvZ2dsZSgnaXMtZG9udC1wb2ludC1ldmVudCcpXHJcbiAgfSlcclxuICByZXR1cm5cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlTW9kYWxXaW5kb3dGb3JRdWVzdGlvblxyXG4iLCJjb25zdCBjcmVhdGVXaW5kb3dJbmZvVXNlciA9IChpZCwgZGF0YSkgPT4ge1xyXG4gIGNvbnN0IHdpbmRvd0luZm8gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnd2luZG93LWluZm8nKTtcclxuICBjb25zdCB0aXRsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2gyJyk7XHJcbiAgd2luZG93SW5mby5pbm5lckhUTUwgPSAnJztcclxuXHJcbiAgdGl0bGUuaW5uZXJIVE1MID0gJ1BvcnRmb2xpbyc7XHJcbiAgdGl0bGUuY2xhc3NOYW1lID0gJ21vZGFsLXRpdGxlJztcclxuICB3aW5kb3dJbmZvLmFwcGVuZENoaWxkKHRpdGxlKTtcclxuXHJcbiAgaWYgKCF3aW5kb3dJbmZvLmNsYXNzTGlzdC5jb250YWlucygnaXMtc2hvdy1pbmZvJykpIHtcclxuICAgIHdpbmRvd0luZm8uY2xhc3NMaXN0LmFkZCgnaXMtc2hvdy1pbmZvJyk7XHJcbiAgfVxyXG5cclxuICBjb25zdCByZXN1bHQgPSBkYXRhLmZpbmQoKGVsKSA9PiB7XHJcbiAgICBpZiAoZWwuaWQgPT0gaWQpIHtcclxuICAgICAgcmV0dXJuIGVsO1xyXG4gICAgfVxyXG4gIH0pO1xyXG5cclxuICBmb3IgKGxldCBrZXkgaW4gcmVzdWx0KSB7XHJcbiAgICBpZiAoa2V5ID09ICdhZHJlc3MnKSB7XHJcbiAgICAgIGZvciAobGV0IGtleTIgaW4gcmVzdWx0W2tleV0pIHtcclxuICAgICAgICBsZXQgcCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcclxuXHJcbiAgICAgICAgcC5pbm5lckhUTUwgPSBgPGI+JHtrZXkyLnRvVXBwZXJDYXNlKCl9PC9iPjogJHtyZXN1bHRba2V5XVtrZXkyXX1gO1xyXG4gICAgICAgIHdpbmRvd0luZm8uYXBwZW5kQ2hpbGQocCk7XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGxldCBwID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xyXG5cclxuICAgICAgcC5pbm5lckhUTUwgPSBgPGI+JHtrZXkudG9VcHBlckNhc2UoKX08L2I+OiAke3Jlc3VsdFtrZXldfWA7XHJcbiAgICAgIHdpbmRvd0luZm8uYXBwZW5kQ2hpbGQocCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICB3aW5kb3dJbmZvLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgd2luZG93SW5mby5jbGFzc0xpc3QucmVtb3ZlKCdpcy1zaG93LWluZm8nKTtcclxuICB9KTtcclxuICByZXR1cm47XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVXaW5kb3dJbmZvVXNlcjtcclxuIiwiaW1wb3J0IGNyZWF0ZU1vZGFsV2luZG93Rm9yUXVlc3Rpb24gZnJvbSAnLi9tb2RhbFdpbmRvd1F1ZXN0aW9uJztcclxuaW1wb3J0IGNyZWF0ZVdpbmRvd0luZm9Vc2VyIGZyb20gJy4vbW9kYWxXaW5kb3dJbmZvJztcclxuXHJcbmNvbnN0IGJ0bk1haW5UcmFzaCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtYWluLXRyYXNoJyk7XHJcbmNvbnN0IGxpc3ROYXYgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbGlzdC1uYXYtdGFibGUnKTtcclxuXHJcbi8vZnVuY3Rpb24gcmVuZGVyaW5nIG5hdmlnYXRpb24gbGlzdCBvbiB0YWJsZSBhbmQgcmVuZGVyaW5nIHRhYmxlLy9cclxuY29uc3QgcmVuZGVyaW5nTGlzdE5hdmlnYXRpb25BbmRUYWJsZSA9IGFzeW5jIChkYXRhKSA9PiB7XHJcbiAgbGV0IGsgPSAxO1xyXG5cclxuICAvL2NvbmRpdGlvbiBvbiBhcnIgYmVjYXVzZSBpdCBpcyBwb3NzaWJsZSB0byBnZXQgMSBlbGVtLy9cclxuICBmb3IgKGxldCBpID0gMDsgaSA8PSAoQXJyYXkuaXNBcnJheShkYXRhKSA/IGRhdGEubGVuZ3RoIC0gMSA6IDApOyBpKyspIHtcclxuICAgIGNvbnN0IGxpID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGknKTtcclxuXHJcbiAgICAvL3JlbmRlciBlbGVtZW50IGV2ZXJ5IDIwLy9cclxuICAgIGlmIChpICUgMjAgPT09IDApIHtcclxuICAgICAgbGkuY2xhc3NMaXN0LmFkZCgnbmF2LWl0ZW0nKTtcclxuICAgICAgbGkuaW5uZXJIVE1MID0gaztcclxuICAgICAgbGkuaWQgPSBgaXRlbS0ke2t9YDtcclxuXHJcbiAgICAgIGlmIChrID09IDEpIHtcclxuICAgICAgICBsaS5jbGFzc0xpc3QuYWRkKCdpcy1hY3RpdmUtaXRlbScpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBsaXN0TmF2LmNoaWxkcmVuW2tdLmluc2VydEFkamFjZW50RWxlbWVudCgnYmVmb3JlYmVnaW4nLCBsaSk7XHJcbiAgICAgIGsrKztcclxuXHJcbiAgICAgIGxpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcclxuICAgICAgICBjb25zdCBpZEVsZW0gPSBlLnRhcmdldC5pZC50b1N0cmluZygpLnNsaWNlKC0xKTtcclxuICAgICAgICBjb25zdCB0YWJsZUFsbFRSID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgndHInKTtcclxuXHJcbiAgICAgICAgaWYgKGxpc3ROYXYuY2hpbGRyZW4ubGVuZ3RoID4gMykge1xyXG4gICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPD0gbGlzdE5hdi5jaGlsZHJlbi5sZW5ndGggLSAxOyBqKyspIHtcclxuICAgICAgICAgICAgbGlzdE5hdi5jaGlsZHJlbltqXS5jbGFzc0xpc3QucmVtb3ZlKCdpcy1hY3RpdmUtaXRlbScpO1xyXG4gICAgICAgICAgICBpZiAoaiA9PSBpZEVsZW0pIHtcclxuICAgICAgICAgICAgICBsaXN0TmF2LmNoaWxkcmVuW2lkRWxlbV0uY2xhc3NMaXN0LmFkZCgnaXMtYWN0aXZlLWl0ZW0nKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDw9IHRhYmxlQWxsVFIubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKHRhYmxlQWxsVFJbMF0uY2xhc3NMaXN0LmNvbnRhaW5zKCdpcy1oaWRkZW4tdGQnKSkge1xyXG4gICAgICAgICAgICAgIHRhYmxlQWxsVFJbMF0uY2xhc3NMaXN0LnRvZ2dsZSgnaXMtaGlkZGVuLXRkJyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChpID49IGlkRWxlbSAqIDIwICYmIGkgPD0gaWRFbGVtICogMjAgKyAxOSAmJiBpZEVsZW0gIT0gMSkge1xyXG4gICAgICAgICAgICAgIHRhYmxlQWxsVFJbaSAtIDFdLmNsYXNzTGlzdC5hZGQoJ2lzLWhpZGRlbi10ZCcpO1xyXG4gICAgICAgICAgICAgIHRhYmxlQWxsVFJbaSAtIDFdLmNsYXNzTGlzdC5yZW1vdmUoJ2lzLWhpZGRlbi10ZCcpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKCF0YWJsZUFsbFRSW2kgLSAxXS5jbGFzc0xpc3QuY29udGFpbnMoJ2lzLWhpZGRlbi10ZCcpKSB7XHJcbiAgICAgICAgICAgICAgdGFibGVBbGxUUltpIC0gMV0uY2xhc3NMaXN0LnRvZ2dsZSgnaXMtaGlkZGVuLXRkJyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChpZEVsZW0gPT0gMSkge1xyXG4gICAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDw9IDE5OyBqKyspIHtcclxuICAgICAgICAgICAgICAgIHRhYmxlQWxsVFJbaiArIDFdLmNsYXNzTGlzdC5hZGQoJ2lzLWhpZGRlbi10ZCcpO1xyXG4gICAgICAgICAgICAgICAgdGFibGVBbGxUUltqICsgMV0uY2xhc3NMaXN0LnJlbW92ZSgnaXMtaGlkZGVuLXRkJyk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9XHJcbn07XHJcblxyXG5jb25zdCBhZGRFbGVtZW50VG9QYWdlID0gKGRhdGEpID0+IHtcclxuICBjb25zdCB0YWJsZUJvZHkgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGFibGUtbGlzdCcpO1xyXG4gIGNvbnN0IHRyVGFibGUgPSB0YWJsZUJvZHkuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3RyJyk7XHJcblxyXG4gIGlmICh0clRhYmxlLmxlbmd0aCA+PSAxKSB7XHJcbiAgICBjb25zdCB0YWJsZUFsbFRSID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgndHInKTtcclxuICAgIGNvbnN0IHRhYmxlTGVuZ3RoID0gdGFibGVBbGxUUi5sZW5ndGggLSAxO1xyXG4gICAgY29uc3QgbGlzdExlbmd0aCA9IGxpc3ROYXYuY2hpbGRyZW4ubGVuZ3RoIC0gMTtcclxuXHJcbiAgICBmb3IgKGxldCBpID0gdGFibGVMZW5ndGg7IGkgPj0gMTsgaS0tKSB7XHJcbiAgICAgIHRhYmxlQWxsVFJbaV0ucmVtb3ZlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgZm9yIChsZXQgaSA9IGxpc3RMZW5ndGg7IGkgPj0gMTsgaS0tKSB7XHJcbiAgICAgIGlmICghKGkgPT0gbGlzdExlbmd0aCkpIHtcclxuICAgICAgICBsaXN0TmF2LmNoaWxkcmVuW2ldLnJlbW92ZSgpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBmb3IgKGxldCBpID0gMDsgaSA8PSAoQXJyYXkuaXNBcnJheShkYXRhKSA/IGRhdGEubGVuZ3RoIC0gMSA6IDApOyBpKyspIHtcclxuICAgIGxldCBqID0gMDtcclxuXHJcbiAgICBjb25zdCB0ciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RyJyk7XHJcblxyXG4gICAgbGV0IGRhdGFGb3JSb3VuZCA9IEFycmF5LmlzQXJyYXkoZGF0YSkgPyBPYmplY3QudmFsdWVzKGRhdGFbaV0pIDogT2JqZWN0LnZhbHVlcyhkYXRhKTtcclxuXHJcbiAgICBjb25zdCBpZFREID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGQnKTtcclxuICAgIGNvbnN0IGZpcnN0TmFtZVREID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGQnKTtcclxuICAgIGNvbnN0IGxhc3ROYW1lVEQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZCcpO1xyXG4gICAgY29uc3QgZW1haWxURCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RkJyk7XHJcbiAgICBjb25zdCBwaG9uZVREID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGQnKTtcclxuICAgIGNvbnN0IHN0YXRlVEQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZCcpO1xyXG4gICAgY29uc3QgZnVuY3Rpb25URCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RkJyk7XHJcblxyXG4gICAgY29uc3QgZnVuY3Rpb25CdG5EZWxldGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcclxuXHJcbiAgICBjb25zdCBjaGVja2JveFREID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGQnKTtcclxuICAgIGNvbnN0IGlucHV0Q2hlY2tib3ggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xyXG4gICAgY29uc3QgbGFiZWxDaGVjYm94ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGFiZWwnKTtcclxuXHJcbiAgICBpbnB1dENoZWNrYm94LnNldEF0dHJpYnV0ZSgndHlwZScsICdjaGVja2JveCcpO1xyXG4gICAgaW5wdXRDaGVja2JveC5jbGFzc0xpc3QuYWRkKCdjaGVja2JveC10YWJsZScpO1xyXG5cclxuICAgIGZ1bmN0aW9uQnRuRGVsZXRlLmlubmVySFRNTCA9ICc8aSBjbGFzcz1cImZhcyBmYS10cmFzaFwiPjwvaT4nO1xyXG4gICAgZnVuY3Rpb25CdG5EZWxldGUuY2xhc3NMaXN0LmFkZCgndGFibGUtYnRuJywgJ3RhYmxlLWJ0bi1kZWxldGUnKTtcclxuXHJcbiAgICBmb3IgKGxldCBlbGVtZW50IGluIEFycmF5LmlzQXJyYXkoZGF0YSkgPyBkYXRhW2ldIDogZGF0YSkge1xyXG4gICAgICBpZiAoZWxlbWVudCA9PT0gJ2lkJykge1xyXG4gICAgICAgIHRyLnNldEF0dHJpYnV0ZSgnaWQnLCBgJHtkYXRhRm9yUm91bmRbal19YCk7XHJcbiAgICAgICAgaWRURC5pbm5lckhUTUwgPSBkYXRhRm9yUm91bmRbal07XHJcbiAgICAgIH0gZWxzZSBpZiAoZWxlbWVudCA9PT0gJ2ZpcnN0TmFtZScpIHtcclxuICAgICAgICBmaXJzdE5hbWVURC5pbm5lckhUTUwgPSBkYXRhRm9yUm91bmRbal07XHJcbiAgICAgICAgaW5wdXRDaGVja2JveC5zZXRBdHRyaWJ1dGUoJ2lkJywgYCR7ZGF0YUZvclJvdW5kW2pdfWApO1xyXG4gICAgICAgIGlucHV0Q2hlY2tib3guc2V0QXR0cmlidXRlKCdmaXJzdE5hbWUnLCBgJHtqfWApO1xyXG4gICAgICAgIGxhYmVsQ2hlY2JveC5zZXRBdHRyaWJ1dGUoJ2ZvcicsIGAke2RhdGFGb3JSb3VuZFtqXX1gKTtcclxuICAgICAgfSBlbHNlIGlmIChlbGVtZW50ID09PSAnbGFzdE5hbWUnKSB7XHJcbiAgICAgICAgbGFzdE5hbWVURC5pbm5lckhUTUwgPSBkYXRhRm9yUm91bmRbal07XHJcbiAgICAgIH0gZWxzZSBpZiAoZWxlbWVudCA9PT0gJ2VtYWlsJykge1xyXG4gICAgICAgIGVtYWlsVEQuaW5uZXJIVE1MID0gZGF0YUZvclJvdW5kW2pdO1xyXG4gICAgICB9IGVsc2UgaWYgKGVsZW1lbnQgPT09ICdwaG9uZScpIHtcclxuICAgICAgICBwaG9uZVRELmlubmVySFRNTCA9IGRhdGFGb3JSb3VuZFtqXTtcclxuICAgICAgfSBlbHNlIGlmIChlbGVtZW50ID09PSAnYWRyZXNzJykge1xyXG4gICAgICAgIHN0YXRlVEQuaW5uZXJIVE1MID0gZGF0YUZvclJvdW5kW2pdLnN0YXRlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBqKys7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGkgPiAxOSkge1xyXG4gICAgICB0ci5jbGFzc0xpc3QudG9nZ2xlKCdpcy1oaWRkZW4tdGQnKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvblRELmFwcGVuZENoaWxkKGZ1bmN0aW9uQnRuRGVsZXRlKTtcclxuXHJcbiAgICBjaGVja2JveFRELmFwcGVuZENoaWxkKGlucHV0Q2hlY2tib3gpO1xyXG4gICAgY2hlY2tib3hURC5hcHBlbmRDaGlsZChsYWJlbENoZWNib3gpO1xyXG5cclxuICAgIHRyLmFwcGVuZENoaWxkKGNoZWNrYm94VEQpO1xyXG4gICAgdHIuYXBwZW5kQ2hpbGQoaWRURCk7XHJcbiAgICB0ci5hcHBlbmRDaGlsZChmaXJzdE5hbWVURCk7XHJcbiAgICB0ci5hcHBlbmRDaGlsZChsYXN0TmFtZVREKTtcclxuICAgIHRyLmFwcGVuZENoaWxkKGVtYWlsVEQpO1xyXG4gICAgdHIuYXBwZW5kQ2hpbGQocGhvbmVURCk7XHJcbiAgICB0ci5hcHBlbmRDaGlsZChzdGF0ZVREKTtcclxuICAgIHRyLmFwcGVuZENoaWxkKGZ1bmN0aW9uVEQpO1xyXG5cclxuICAgIHRhYmxlQm9keS5pbnNlcnRCZWZvcmUodHIsIHRhYmxlQm9keS5jaGlsZHJlbltpICsgMV0pO1xyXG5cclxuICAgIGNoZWNrYm94VEQuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKCkgPT4ge1xyXG4gICAgICBjb25zdCB0YWJsZUFsbFRSID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgndHInKTtcclxuXHJcbiAgICAgIGxldCBib29sQXJyID0gW107XHJcbiAgICAgIGZvciAobGV0IGkgPSAxOyBpIDw9IHRhYmxlQWxsVFIubGVuZ3RoIC0gMTsgaSsrKSB7XHJcbiAgICAgICAgYm9vbEFyci5wdXNoKHRhYmxlQWxsVFJbaV0uY2hpbGRyZW5bMF0uY2hpbGRyZW5bMF0uY2hlY2tlZCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChib29sQXJyLmV2ZXJ5KChlbGVtKSA9PiBlbGVtID09IHRydWUpKSB7XHJcbiAgICAgICAgdGFibGVBbGxUUlswXS5jaGlsZHJlblswXS5jaGlsZHJlblswXS5jaGVja2VkID0gdHJ1ZTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0YWJsZUFsbFRSWzBdLmNoaWxkcmVuWzBdLmNoaWxkcmVuWzBdLmNoZWNrZWQgPSBmYWxzZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKGJvb2xBcnIuc29tZSgoZWxlbSkgPT4gZWxlbSA9PSB0cnVlKSAmJiAhYnRuTWFpblRyYXNoLmNsYXNzTGlzdC5jb250YWlucygnaWQtZGlzYWJsZWQnKSkge1xyXG4gICAgICAgIGJ0bk1haW5UcmFzaC5jbGFzc0xpc3QucmVtb3ZlKCdpcy1kaXNhYmxlZCcpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGJ0bk1haW5UcmFzaC5jbGFzc0xpc3QuYWRkKCdpcy1kaXNhYmxlZCcpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBmdW5jdGlvbkJ0bkRlbGV0ZS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKSA9PiB7XHJcbiAgICAgIGlmIChlLnBhdGhbM10udGFnTmFtZSA9PT0gJ1RSJykge1xyXG4gICAgICAgIGNyZWF0ZU1vZGFsV2luZG93Rm9yUXVlc3Rpb24oZS5wYXRoWzNdLmlkLCBkYXRhKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBjcmVhdGVNb2RhbFdpbmRvd0ZvclF1ZXN0aW9uKGUucGF0aFsyXS5pZCwgZGF0YSk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIHRyLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcclxuICAgICAgaWYgKFxyXG4gICAgICAgICEoZS50YXJnZXQudGFnTmFtZSA9PSAnSScpICYmXHJcbiAgICAgICAgIShlLnRhcmdldC50YWdOYW1lID09ICdMQUJFTCcpICYmXHJcbiAgICAgICAgIShlLnRhcmdldC50YWdOYW1lID09ICdJTlBVVCcpXHJcbiAgICAgICkge1xyXG4gICAgICAgIGNvbnN0IGhlaWdodCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdtYWluJylbMF0ub2Zmc2V0SGVpZ2h0O1xyXG4gICAgICAgIGNvbnN0IGRpdiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd3aW5kb3ctaW5mbycpLm9mZnNldEhlaWdodDtcclxuICAgICAgICB3aW5kb3cuc2Nyb2xsKDAsIGhlaWdodCArIGRpdik7XHJcblxyXG4gICAgICAgIGNyZWF0ZVdpbmRvd0luZm9Vc2VyKHRyLmlkLCBkYXRhKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICByZW5kZXJpbmdMaXN0TmF2aWdhdGlvbkFuZFRhYmxlKGRhdGEpO1xyXG4gIHJldHVybjtcclxufTtcclxuZXhwb3J0IGRlZmF1bHQgYWRkRWxlbWVudFRvUGFnZTtcclxuIiwiLy9mdW5jdGlvbiBmcm9tIHNlYXJjaGluZyBvbiBmaWx0ZXJzLy9cclxuY29uc3Qgc2VhcmNoRnJvbUZpbHRlciA9IChzLCBhcnIsIG5hbWUpID0+IHtcclxuICBsZXQgcmVzdWx0ID0gYXJyLmZpbHRlcihmdW5jdGlvbiAoZWwpIHtcclxuICAgIGlmIChuYW1lID09ICdhZHJlc3MnKVxyXG4gICAgICByZXR1cm4gZWxbbmFtZV0uc3RhdGUudG9Mb3dlckNhc2UoKS5pbmRleE9mKHMudG9Mb3dlckNhc2UoKSkgPiAtMTtcclxuXHJcbiAgICByZXR1cm4gZWxbbmFtZV0udG9Mb3dlckNhc2UoKS5pbmRleE9mKHMpID4gLTE7XHJcbiAgfSk7XHJcblxyXG4gIHJldHVybiByZXN1bHQ7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBzZWFyY2hGcm9tRmlsdGVyO1xyXG4iLCJpbXBvcnQgYWRkRWxlbWVudFRvUGFnZSBmcm9tICcuL3JlbmRlclBhZ2VzJztcclxuXHJcbmNvbnN0IHNvcnRMaXN0VGFibGUgPSAobmFtZSwgZGF0YSwgaSkgPT4ge1xyXG4gIGxldCByZXN1bHQgPSBkYXRhLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcclxuICAgIGlmIChpID09IDIpIHtcclxuICAgICAgaWYgKG5hbWUgPT0gJ3N0YXRlJykge1xyXG4gICAgICAgIGlmIChhLmFkcmVzcy5zdGF0ZSA8IGIuYWRyZXNzLnN0YXRlKSB7XHJcbiAgICAgICAgICByZXR1cm4gLTE7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoYS5hZHJlc3Muc3RhdGUgPiBiLmFkcmVzcy5zdGF0ZSkge1xyXG4gICAgICAgICAgcmV0dXJuIDE7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gMDtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBpZiAoYVtuYW1lXSA8IGJbbmFtZV0pIHtcclxuICAgICAgICAgIHJldHVybiAtMTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChhW25hbWVdID4gYltuYW1lXSkge1xyXG4gICAgICAgICAgcmV0dXJuIDE7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gMDtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIGlmIChpID09IDMpIHtcclxuICAgICAgaWYgKG5hbWUgPT0gJ3N0YXRlJykge1xyXG4gICAgICAgIGlmIChhLmFkcmVzcy5zdGF0ZSA+IGIuYWRyZXNzLnN0YXRlKSB7XHJcbiAgICAgICAgICByZXR1cm4gMTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChhLmFkcmVzcy5zdGF0ZSA8IGIuYWRyZXNzLnN0YXRlKSB7XHJcbiAgICAgICAgICByZXR1cm4gLTE7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gMDtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBpZiAoYVtuYW1lXSA8IGJbbmFtZV0pIHtcclxuICAgICAgICAgIHJldHVybiAxO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGFbbmFtZV0gPiBiW25hbWVdKSB7XHJcbiAgICAgICAgICByZXR1cm4gLTE7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gMDtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH0pO1xyXG5cclxuICBhZGRFbGVtZW50VG9QYWdlKHJlc3VsdCk7XHJcbiAgcmV0dXJuO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgc29ydExpc3RUYWJsZTtcclxuIiwiaW1wb3J0IHNlYXJjaEZyb21GaWx0ZXIgZnJvbSAnLi9zZWFyY2hGcm9tRmlsdGVyJztcclxuaW1wb3J0IHNvcnRMaXN0VGFibGUgZnJvbSAnLi9zb3J0TGlzdFRhYmxlJztcclxuaW1wb3J0IGFkZEVsZW1lbnRUb1BhZ2UgZnJvbSAnLi9yZW5kZXJQYWdlcyc7XHJcbmltcG9ydCBjcmVhdGVNb2RhbFdpbmRvd0ZvclF1ZXN0aW9uIGZyb20gJy4vbW9kYWxXaW5kb3dRdWVzdGlvbic7XHJcbmltcG9ydCBnZXRKU09ORGF0YSBmcm9tICcuL3dvcmtXaXRoSlNPTic7XHJcblxyXG5jb25zdCBmaWx0ZXJGaXJzdE5hbWUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZmlsdGVyLWZpcnN0TmFtZScpO1xyXG5jb25zdCBzZWxlY3RvclN0YXRlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NlbGVjdG9yLXN0YXRlJyk7XHJcbmNvbnN0IGJ0bk1haW5UcmFzaCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtYWluLXRyYXNoJyk7XHJcbmNvbnN0IGxpc3ROYXYgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbGlzdC1uYXYtdGFibGUnKTtcclxuY29uc3QgbGlzdFRIID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmlzLXNvcnQnKTtcclxubGV0IGdsb2JhbENvdW50ID0gMjtcclxuXHJcbmNvbnN0IGxpc3RlbmVycyA9IGFzeW5jIChkYXRhKSA9PiB7XHJcbiAgLy9maWx0ZXIvL1xyXG4gIGZpbHRlckZpcnN0TmFtZS5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIChlKSA9PiB7XHJcbiAgICBjb25zdCB2YWx1ZSA9IGUudGFyZ2V0LnZhbHVlO1xyXG5cclxuICAgIGFkZEVsZW1lbnRUb1BhZ2Uoc2VhcmNoRnJvbUZpbHRlcih2YWx1ZS50b0xvd2VyQ2FzZSgpLCBkYXRhLCAnZmlyc3ROYW1lJykpO1xyXG4gIH0pO1xyXG4gIC8vZmlsdGVyLy9cclxuXHJcbiAgLy9zZWxlY3RcclxuICBzZWxlY3RvclN0YXRlLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIChlKSA9PiB7XHJcbiAgICBjb25zdCB2YWx1ZSA9IGUudGFyZ2V0LnZhbHVlO1xyXG4gICAgbGV0IHJlcyA9IFtdO1xyXG5cclxuICAgIGlmICghKGUudGFyZ2V0LnZhbHVlID09ICdOb3RoaW5nJykpIHtcclxuICAgICAgcmVzID0gc2VhcmNoRnJvbUZpbHRlcih2YWx1ZSwgZGF0YSwgJ2FkcmVzcycpO1xyXG4gICAgICBhZGRFbGVtZW50VG9QYWdlKHJlcyk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBhZGRFbGVtZW50VG9QYWdlKGRhdGEpO1xyXG4gICAgfVxyXG4gIH0pO1xyXG4gIC8vc2VsZWN0XHJcblxyXG4gIC8vYnRuIGxpc3RlbmVycy8vXHJcblxyXG4gIGJ0bk1haW5UcmFzaC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgIGNvbnN0IHRhYmxlQWxsVFIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCd0cicpO1xyXG5cclxuICAgIGxldCBib29sQXJyID0gW107XHJcbiAgICBsZXQgaWRVc2VycyA9IFtdO1xyXG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPD0gdGFibGVBbGxUUi5sZW5ndGggLSAxOyBpKyspIHtcclxuICAgICAgYm9vbEFyci5wdXNoKHRhYmxlQWxsVFJbaV0uY2hpbGRyZW5bMF0uY2hpbGRyZW5bMF0uY2hlY2tlZCk7XHJcbiAgICAgIGlmICh0YWJsZUFsbFRSW2ldLmNoaWxkcmVuWzBdLmNoaWxkcmVuWzBdLmNoZWNrZWQpIHtcclxuICAgICAgICBpZFVzZXJzLnB1c2godGFibGVBbGxUUltpXS5pZCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpZiAoYm9vbEFyci5zb21lKChlbGVtKSA9PiBlbGVtID09IHRydWUpKSB7XHJcbiAgICAgIGNyZWF0ZU1vZGFsV2luZG93Rm9yUXVlc3Rpb24odW5kZWZpbmVkLCBpZFVzZXJzKTtcclxuICAgIH1cclxuICB9KTtcclxuXHJcbiAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2NoZWNrYm94LW1haW4nKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKSA9PiB7XHJcbiAgICBjb25zdCB0YWJsZUFsbFRSID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgndHInKTtcclxuXHJcbiAgICBpZiAoZS5wYXRoWzBdLmNoZWNrZWQpIHtcclxuICAgICAgdGFibGVBbGxUUi5mb3JFYWNoKChlbGVtKSA9PiB7XHJcbiAgICAgICAgaWYgKCFlbGVtLmNsYXNzTGlzdC5jb250YWlucygnaXMtaGlkZGVuLXRkJykpIHtcclxuICAgICAgICAgIGVsZW0uY2hpbGRyZW5bMF0uY2hpbGRyZW5bMF0uY2hlY2tlZCA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgICAgYnRuTWFpblRyYXNoLmNsYXNzTGlzdC5yZW1vdmUoJ2lzLWRpc2FibGVkJyk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0YWJsZUFsbFRSLmZvckVhY2goKGVsZW0pID0+IChlbGVtLmNoaWxkcmVuWzBdLmNoaWxkcmVuWzBdLmNoZWNrZWQgPSBmYWxzZSkpO1xyXG4gICAgICBidG5NYWluVHJhc2guY2xhc3NMaXN0LmFkZCgnaXMtZGlzYWJsZWQnKTtcclxuICAgIH1cclxuICB9KTtcclxuXHJcbiAgbGlzdE5hdi5jaGlsZHJlbltsaXN0TmF2LmNoaWxkcmVuLmxlbmd0aCAtIDFdLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgbGV0IGlkRWxlbTtcclxuXHJcbiAgICBpZiAobGlzdE5hdi5jaGlsZHJlbi5sZW5ndGggPiAzKSB7XHJcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDw9IGxpc3ROYXYuY2hpbGRyZW4ubGVuZ3RoIC0gMTsgaSsrKSB7XHJcbiAgICAgICAgaWYgKGxpc3ROYXYuY2hpbGRyZW5bbGlzdE5hdi5jaGlsZHJlbi5sZW5ndGggLSAyXS5jbGFzc0xpc3QuY29udGFpbnMoJ2lzLWFjdGl2ZS1pdGVtJykpIHtcclxuICAgICAgICAgIGlkRWxlbSA9IGxpc3ROYXYuY2hpbGRyZW5bbGlzdE5hdi5jaGlsZHJlbi5sZW5ndGggLSAyXS5pZC50b1N0cmluZygpLnNsaWNlKC0xKTtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH0gZWxzZSBpZiAobGlzdE5hdi5jaGlsZHJlbltpXS5jbGFzc0xpc3QuY29udGFpbnMoJ2lzLWFjdGl2ZS1pdGVtJykpIHtcclxuICAgICAgICAgIGlkRWxlbSA9IGkgKyAxO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPD0gbGlzdE5hdi5jaGlsZHJlbi5sZW5ndGggLSAxOyBqKyspIHtcclxuICAgICAgICBsaXN0TmF2LmNoaWxkcmVuW2pdLmNsYXNzTGlzdC5yZW1vdmUoJ2lzLWFjdGl2ZS1pdGVtJyk7XHJcblxyXG4gICAgICAgIGlmIChqID09IGlkRWxlbSkge1xyXG4gICAgICAgICAgbGlzdE5hdi5jaGlsZHJlbltpZEVsZW1dLmNsYXNzTGlzdC5hZGQoJ2lzLWFjdGl2ZS1pdGVtJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICBmb3IgKGxldCBrID0gMDsgayA8PSBkYXRhLmxlbmd0aCAtIDE7IGsrKykge1xyXG4gICAgICAgIGlmIChrICUgMjAgPT09IDApIHtcclxuICAgICAgICAgIGNvbnN0IHRhYmxlQWxsVFIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCd0cicpO1xyXG5cclxuICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDw9IGxpc3ROYXYuY2hpbGRyZW4ubGVuZ3RoIC0gMTsgaisrKSB7XHJcbiAgICAgICAgICAgIGxpc3ROYXYuY2hpbGRyZW5bal0uY2xhc3NMaXN0LnJlbW92ZSgnaXMtYWN0aXZlLWl0ZW0nKTtcclxuICAgICAgICAgICAgaWYgKGogPT0gaWRFbGVtKSB7XHJcbiAgICAgICAgICAgICAgbGlzdE5hdi5jaGlsZHJlbltpZEVsZW1dLmNsYXNzTGlzdC5hZGQoJ2lzLWFjdGl2ZS1pdGVtJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8PSB0YWJsZUFsbFRSLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmICh0YWJsZUFsbFRSWzBdLmNsYXNzTGlzdC5jb250YWlucygnaXMtaGlkZGVuLXRkJykpIHtcclxuICAgICAgICAgICAgICB0YWJsZUFsbFRSWzBdLmNsYXNzTGlzdC50b2dnbGUoJ2lzLWhpZGRlbi10ZCcpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoaSA+PSBpZEVsZW0gKiAyMCAmJiBpIDw9IGlkRWxlbSAqIDIwICsgMTkgJiYgaWRFbGVtICE9IDEpIHtcclxuICAgICAgICAgICAgICB0YWJsZUFsbFRSW2kgLSAxXS5jbGFzc0xpc3QuYWRkKCdpcy1oaWRkZW4tdGQnKTtcclxuICAgICAgICAgICAgICB0YWJsZUFsbFRSW2kgLSAxXS5jbGFzc0xpc3QucmVtb3ZlKCdpcy1oaWRkZW4tdGQnKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICghdGFibGVBbGxUUltpIC0gMV0uY2xhc3NMaXN0LmNvbnRhaW5zKCdpcy1oaWRkZW4tdGQnKSkge1xyXG4gICAgICAgICAgICAgIHRhYmxlQWxsVFJbaSAtIDFdLmNsYXNzTGlzdC50b2dnbGUoJ2lzLWhpZGRlbi10ZCcpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoaWRFbGVtID09IDEpIHtcclxuICAgICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8PSA0OyBqKyspIHtcclxuICAgICAgICAgICAgICAgIHRhYmxlQWxsVFJbaiArIDFdLmNsYXNzTGlzdC5hZGQoJ2lzLWhpZGRlbi10ZCcpO1xyXG4gICAgICAgICAgICAgICAgdGFibGVBbGxUUltqICsgMV0uY2xhc3NMaXN0LnJlbW92ZSgnaXMtaGlkZGVuLXRkJyk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfSk7XHJcblxyXG4gIGxpc3ROYXYuY2hpbGRyZW5bMF0uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcbiAgICBsZXQgaWRFbGVtO1xyXG5cclxuICAgIGlmIChsaXN0TmF2LmNoaWxkcmVuLmxlbmd0aCA+IDMpIHtcclxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPD0gbGlzdE5hdi5jaGlsZHJlbi5sZW5ndGggLSAxOyBpKyspIHtcclxuICAgICAgICBpZiAobGlzdE5hdi5jaGlsZHJlblsxXS5jbGFzc0xpc3QuY29udGFpbnMoJ2lzLWFjdGl2ZS1pdGVtJykpIHtcclxuICAgICAgICAgIGlkRWxlbSA9IGxpc3ROYXYuY2hpbGRyZW5bMV0uaWQudG9TdHJpbmcoKS5zbGljZSgtMSk7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICB9IGVsc2UgaWYgKGxpc3ROYXYuY2hpbGRyZW5baV0uY2xhc3NMaXN0LmNvbnRhaW5zKCdpcy1hY3RpdmUtaXRlbScpKSB7XHJcbiAgICAgICAgICBpZEVsZW0gPSBpIC0gMTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDw9IGxpc3ROYXYuY2hpbGRyZW4ubGVuZ3RoIC0gMTsgaisrKSB7XHJcbiAgICAgICAgbGlzdE5hdi5jaGlsZHJlbltqXS5jbGFzc0xpc3QucmVtb3ZlKCdpcy1hY3RpdmUtaXRlbScpO1xyXG4gICAgICAgIGlmIChqID09IGlkRWxlbSkge1xyXG4gICAgICAgICAgbGlzdE5hdi5jaGlsZHJlbltpZEVsZW1dLmNsYXNzTGlzdC5hZGQoJ2lzLWFjdGl2ZS1pdGVtJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICBmb3IgKGxldCBrID0gMDsgayA8PSBkYXRhLmxlbmd0aCAtIDE7IGsrKykge1xyXG4gICAgICAgIGlmIChrICUgMjAgPT09IDApIHtcclxuICAgICAgICAgIGNvbnN0IHRhYmxlQWxsVFIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCd0cicpO1xyXG5cclxuICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDw9IGxpc3ROYXYuY2hpbGRyZW4ubGVuZ3RoIC0gMTsgaisrKSB7XHJcbiAgICAgICAgICAgIGxpc3ROYXYuY2hpbGRyZW5bal0uY2xhc3NMaXN0LnJlbW92ZSgnaXMtYWN0aXZlLWl0ZW0nKTtcclxuICAgICAgICAgICAgaWYgKGogPT0gaWRFbGVtKSB7XHJcbiAgICAgICAgICAgICAgbGlzdE5hdi5jaGlsZHJlbltpZEVsZW1dLmNsYXNzTGlzdC5hZGQoJ2lzLWFjdGl2ZS1pdGVtJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8PSB0YWJsZUFsbFRSLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmICh0YWJsZUFsbFRSWzBdLmNsYXNzTGlzdC5jb250YWlucygnaXMtaGlkZGVuLXRkJykpIHtcclxuICAgICAgICAgICAgICB0YWJsZUFsbFRSWzBdLmNsYXNzTGlzdC50b2dnbGUoJ2lzLWhpZGRlbi10ZCcpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoaSA+PSBpZEVsZW0gKiAyMCAmJiBpIDw9IGlkRWxlbSAqIDIwICsgMTkgJiYgaWRFbGVtICE9IDEpIHtcclxuICAgICAgICAgICAgICB0YWJsZUFsbFRSW2kgLSAxXS5jbGFzc0xpc3QuYWRkKCdpcy1oaWRkZW4tdGQnKTtcclxuICAgICAgICAgICAgICB0YWJsZUFsbFRSW2kgLSAxXS5jbGFzc0xpc3QucmVtb3ZlKCdpcy1oaWRkZW4tdGQnKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICghdGFibGVBbGxUUltpIC0gMV0uY2xhc3NMaXN0LmNvbnRhaW5zKCdpcy1oaWRkZW4tdGQnKSkge1xyXG4gICAgICAgICAgICAgIHRhYmxlQWxsVFJbaSAtIDFdLmNsYXNzTGlzdC50b2dnbGUoJ2lzLWhpZGRlbi10ZCcpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoaWRFbGVtID09IDEpIHtcclxuICAgICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8PSAxOTsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICB0YWJsZUFsbFRSW2ogKyAxXS5jbGFzc0xpc3QuYWRkKCdpcy1oaWRkZW4tdGQnKTtcclxuICAgICAgICAgICAgICAgIHRhYmxlQWxsVFJbaiArIDFdLmNsYXNzTGlzdC5yZW1vdmUoJ2lzLWhpZGRlbi10ZCcpO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH0pO1xyXG5cclxuICBsaXN0VEguZm9yRWFjaCgoZWwpID0+IHtcclxuICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcclxuICAgICAgY29uc3QgdGV4dCA9IGUuY3VycmVudFRhcmdldC5pbm5lckhUTUw7XHJcbiAgICAgIGxldCB0ZXh0VEggPVxyXG4gICAgICAgIHRleHQuY2hhckF0KDApLnRvTG93ZXJDYXNlKCkgK1xyXG4gICAgICAgIHRleHQuc3Vic3RyaW5nKDAsIHRleHQuaW5kZXhPZignPCcpKS5zbGljZSgxKS5yZXBsYWNlKC9cXHMvZywgJycpO1xyXG5cclxuICAgICAgbGlzdFRILmZvckVhY2goKGl0ZW0pID0+IHtcclxuICAgICAgICBpZiAoXHJcbiAgICAgICAgICBpdGVtLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdpJylbMF0uY2xhc3NMaXN0LmNvbnRhaW5zKCdmYS1hcnJvdy11cCcpIHx8XHJcbiAgICAgICAgICBpdGVtLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdpJylbMF0uY2xhc3NMaXN0LmNvbnRhaW5zKCdmYS1hcnJvdy1kb3duJylcclxuICAgICAgICApIHtcclxuICAgICAgICAgIGl0ZW0uZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2knKVswXS5jbGFzc05hbWUgPSAnZmFzJztcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgaWYgKGdsb2JhbENvdW50ID09IDQgfHwgZ2xvYmFsQ291bnQgPT0gMSkge1xyXG4gICAgICAgIGdldEpTT05EYXRhKGFkZEVsZW1lbnRUb1BhZ2UpO1xyXG4gICAgICAgIGdsb2JhbENvdW50ID0gMjtcclxuICAgICAgfSBlbHNlIGlmIChnbG9iYWxDb3VudCA9PSAzKSB7XHJcbiAgICAgICAgZWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2knKVswXS5jbGFzc05hbWUgPSAnZmFzIGZhLWFycm93LXVwJztcclxuICAgICAgICBzb3J0TGlzdFRhYmxlKHRleHRUSCwgZGF0YSwgZ2xvYmFsQ291bnQpO1xyXG4gICAgICAgIGdsb2JhbENvdW50Kys7XHJcbiAgICAgIH0gZWxzZSBpZiAoZ2xvYmFsQ291bnQgPT0gMikge1xyXG4gICAgICAgIHNvcnRMaXN0VGFibGUodGV4dFRILCBkYXRhLCBnbG9iYWxDb3VudCk7XHJcbiAgICAgICAgZ2xvYmFsQ291bnQrKztcclxuXHJcbiAgICAgICAgZWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2knKVswXS5jbGFzc05hbWUgPSAnZmFzIGZhLWFycm93LWRvd24nO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9KTtcclxuICAvL2J0biBsaXN0ZW5lcnMvL1xyXG4gIHJldHVybjtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGxpc3RlbmVycztcclxuIiwiY29uc3Qgc2VsZWN0b3JTdGF0ZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzZWxlY3Rvci1zdGF0ZScpXHJcblxyXG5jb25zdCBmaWxsaW5nSW5UaGVTZWxlY3RvciA9IGFzeW5jIChkYXRhKSA9PiB7XHJcbiAgY29uc3QgcmVzdWx0ID0gW11cclxuXHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPD0gZGF0YS5sZW5ndGggLSAxOyBpKyspIHtcclxuICAgIGZvciAobGV0IGtleSBpbiBkYXRhW2ldKSB7XHJcbiAgICAgIGlmIChrZXkgPT0gJ2FkcmVzcycpIHtcclxuICAgICAgICBpZiAoIXJlc3VsdC5pbmNsdWRlcyhkYXRhW2ldW2tleV0uc3RhdGUpKSB7XHJcbiAgICAgICAgICByZXN1bHQucHVzaChkYXRhW2ldW2tleV0uc3RhdGUpXHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXN1bHQuZm9yRWFjaCgoZWwpID0+IHtcclxuICAgIGxldCBvcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdvcHRpb24nKVxyXG4gICAgb3B0aW9uLmlubmVySFRNTCA9IGVsXHJcbiAgICBzZWxlY3RvclN0YXRlLmFwcGVuZENoaWxkKG9wdGlvbilcclxuICB9KVxyXG5cclxuICBsZXQgb3B0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnb3B0aW9uJylcclxuICBvcHRpb24uaW5uZXJIVE1MID0gJ05vdGhpbmcnXHJcbiAgc2VsZWN0b3JTdGF0ZS5wcmVwZW5kKG9wdGlvbilcclxuICBzZWxlY3RvclN0YXRlLnZhbHVlID0gJ05vdGhpbmcnXHJcblxyXG4gIHJldHVyblxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmaWxsaW5nSW5UaGVTZWxlY3RvclxyXG4iLCJpbXBvcnQgYWRkRWxlbWVudFRvUGFnZSBmcm9tICcuL3JlbmRlclBhZ2VzJztcclxuaW1wb3J0IGxpc3RlbmVycyBmcm9tICcuL2xpc3RlbmVycyc7XHJcbmltcG9ydCBmaWxsaW5nSW5UaGVTZWxlY3RvciBmcm9tICcuL2ZpbGxpbmdTZWxlYyc7XHJcblxyXG5jb25zdCB1cmwgPSAnaHR0cHM6Ly9pdHJleC1yZWFjdC1sYWItZmlsZXMuczMuZXUtY2VudHJhbC0xLmFtYXpvbmF3cy5jb20vcmVhY3QtdGVzdC1hcGkuanNvbic7XHJcblxyXG5jb25zdCBnZXRKU09ORGF0YSA9IGFzeW5jICh2KSA9PiB7XHJcbiAgdHJ5IHtcclxuICAgIGF3YWl0IGZldGNoKGAke3VybH1gKVxyXG4gICAgICAudGhlbigoZGF0YSkgPT4gZGF0YS5qc29uKCkpXHJcbiAgICAgIC50aGVuKChkYXRhKSA9PiB7XHJcbiAgICAgICAgYWRkRWxlbWVudFRvUGFnZShkYXRhKTtcclxuICAgICAgICBsaXN0ZW5lcnMoZGF0YSk7XHJcbiAgICAgICAgZmlsbGluZ0luVGhlU2VsZWN0b3IoZGF0YSk7XHJcbiAgICAgIH0pO1xyXG4gIH0gY2F0Y2ggKGUpIHtcclxuICAgIGNvbnNvbGUubG9nKGUpO1xyXG4gIH1cclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGdldEpTT05EYXRhO1xyXG4iXSwibmFtZXMiOlsiY3JlYXRlTW9kYWxXaW5kb3dGb3JRdWVzdGlvbiIsImFzeW5jIiwiaWQiLCJhcnIiLCJkaXYiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJidG5PayIsImJ0bkNsb3NlIiwicEZvckRpdiIsImZvcm0iLCJib2R5IiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJjbGFzc0xpc3QiLCJhZGQiLCJpbm5lckhUTUwiLCJhcHBlbmRDaGlsZCIsInRvZ2dsZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJlIiwicHJldmVudERlZmF1bHQiLCJ0YWJsZUFsbFRSIiwicXVlcnlTZWxlY3RvckFsbCIsImkiLCJsZW5ndGgiLCJ1bnNoaWZ0IiwicmVtb3ZlIiwiY2hpbGRyZW4iLCJjaGVja2VkIiwicXVlcnlTZWxlY3RvciIsImNyZWF0ZVdpbmRvd0luZm9Vc2VyIiwiZGF0YSIsIndpbmRvd0luZm8iLCJnZXRFbGVtZW50QnlJZCIsInRpdGxlIiwiY2xhc3NOYW1lIiwiY29udGFpbnMiLCJyZXN1bHQiLCJmaW5kIiwiZWwiLCJrZXkiLCJrZXkyIiwicCIsInRvVXBwZXJDYXNlIiwiYnRuTWFpblRyYXNoIiwibGlzdE5hdiIsImFkZEVsZW1lbnRUb1BhZ2UiLCJ0YWJsZUJvZHkiLCJ0YWJsZUxlbmd0aCIsImxpc3RMZW5ndGgiLCJBcnJheSIsImlzQXJyYXkiLCJqIiwidHIiLCJkYXRhRm9yUm91bmQiLCJPYmplY3QiLCJ2YWx1ZXMiLCJpZFREIiwiZmlyc3ROYW1lVEQiLCJsYXN0TmFtZVREIiwiZW1haWxURCIsInBob25lVEQiLCJzdGF0ZVREIiwiZnVuY3Rpb25URCIsImZ1bmN0aW9uQnRuRGVsZXRlIiwiY2hlY2tib3hURCIsImlucHV0Q2hlY2tib3giLCJsYWJlbENoZWNib3giLCJzZXRBdHRyaWJ1dGUiLCJlbGVtZW50Iiwic3RhdGUiLCJpbnNlcnRCZWZvcmUiLCJib29sQXJyIiwicHVzaCIsImV2ZXJ5IiwiZWxlbSIsInNvbWUiLCJwYXRoIiwidGFnTmFtZSIsInRhcmdldCIsImhlaWdodCIsIm9mZnNldEhlaWdodCIsIndpbmRvdyIsInNjcm9sbCIsImsiLCJsaSIsImluc2VydEFkamFjZW50RWxlbWVudCIsImlkRWxlbSIsInRvU3RyaW5nIiwic2xpY2UiLCJyZW5kZXJpbmdMaXN0TmF2aWdhdGlvbkFuZFRhYmxlIiwic2VhcmNoRnJvbUZpbHRlciIsInMiLCJuYW1lIiwiZmlsdGVyIiwidG9Mb3dlckNhc2UiLCJpbmRleE9mIiwic29ydExpc3RUYWJsZSIsInNvcnQiLCJhIiwiYiIsImFkcmVzcyIsImZpbHRlckZpcnN0TmFtZSIsInNlbGVjdG9yU3RhdGUiLCJsaXN0VEgiLCJnbG9iYWxDb3VudCIsImdldEpTT05EYXRhIiwiZmV0Y2giLCJ0aGVuIiwianNvbiIsInZhbHVlIiwicmVzIiwiaWRVc2VycyIsInVuZGVmaW5lZCIsImZvckVhY2giLCJ0ZXh0IiwiY3VycmVudFRhcmdldCIsInRleHRUSCIsImNoYXJBdCIsInN1YnN0cmluZyIsInJlcGxhY2UiLCJpdGVtIiwibGlzdGVuZXJzIiwiaW5jbHVkZXMiLCJvcHRpb24iLCJwcmVwZW5kIiwiZmlsbGluZ0luVGhlU2VsZWN0b3IiLCJjb25zb2xlIiwibG9nIl0sIm1hcHBpbmdzIjoieUNBQ0EsTUFBTUEsRUFBK0JDLE1BQU9DLEVBQUlDLFdBQ3hDQyxFQUFNQyxTQUFTQyxjQUFjLE9BQ2pDQyxFQUFRRixTQUFTQyxjQUFjLFVBQy9CRSxFQUFXSCxTQUFTQyxjQUFjLFVBQ2xDRyxFQUFVSixTQUFTQyxjQUFjLEtBQ2pDSSxFQUFPTCxTQUFTQyxjQUFjLFFBQzlCSyxFQUFPTixTQUFTTyxxQkFBcUIsUUFBUSxHQUUvQ1IsRUFBSVMsVUFBVUMsSUFBSSxrQkFBbUIsY0FDckNOLEVBQVNLLFVBQVVDLElBQUksZ0JBQ3ZCUCxFQUFNTSxVQUFVQyxJQUFJLGdCQUVwQkwsRUFBUU0sVUFBWSwwQkFDcEJSLEVBQU1RLFVBQVksS0FDbEJQLEVBQVNPLFVBQVksUUFFckJYLEVBQUlZLFlBQVlQLEdBQ2hCTCxFQUFJWSxZQUFZTixHQUNoQkEsRUFBS00sWUFBWVQsR0FDakJHLEVBQUtNLFlBQVlSLEdBRWpCSCxTQUFTTyxxQkFBcUIsUUFBUSxHQUFHSSxZQUFZWixHQUNyRE8sRUFBS0UsVUFBVUksT0FBTyx1QkFFdEJQLEVBQUtRLGlCQUFpQixTQUFXQyxJQUMvQkEsRUFBRUMsdUJBRUlDLEVBQWFoQixTQUFTaUIsaUJBQWlCLFVBR3hDLElBQUlD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
