var listeners=function(){"use strict";const e=(e,t,s)=>t.filter((function(t){return"adress"==s?t[s].state.toLowerCase().indexOf(e.toLowerCase())>-1:t[s].toLowerCase().indexOf(e)>-1})),t=async(e,t)=>{const s=document.createElement("div"),i=document.createElement("button"),n=document.createElement("button"),d=document.createElement("p"),l=document.createElement("form"),a=document.getElementsByTagName("body")[0];s.classList.add("position-center","box-column"),n.classList.add("form-add-btn"),i.classList.add("form-add-btn"),d.innerHTML="Are you sure to delete?",i.innerHTML="Ok",n.innerHTML="Close",s.appendChild(d),s.appendChild(l),l.appendChild(i),l.appendChild(n),document.getElementsByTagName("body")[0].appendChild(s),a.classList.toggle("is-dont-point-event"),l.addEventListener("submit",i=>{i.preventDefault();const n=document.querySelectorAll("tr");for(let s=1;s<=n.length-1;s++)e?n[s].id===e&&(t.unshift(n[s].id),n[s].remove()):n[s].children[0].children[0].checked&&(t.unshift(n[s].id),n[s].remove());s.remove(),a.classList.toggle("is-dont-point-event"),document.querySelector("#checkbox-main").checked=!1}),n.addEventListener("click",()=>{s.remove(),a.classList.toggle("is-dont-point-event")})},s=(e,t)=>{const s=document.getElementById("window-info"),i=document.createElement("h2");s.innerHTML="",i.innerHTML="Portfolio",i.className="modal-title",s.appendChild(i),s.classList.contains("is-show-info")||s.classList.add("is-show-info");const n=t.find(t=>{if(t.id==e)return t});for(let e in n)if("adress"==e)for(let t in n[e]){let i=document.createElement("p");i.innerHTML=`<b>${t.toUpperCase()}</b>: ${n[e][t]}`,s.appendChild(i)}else{let t=document.createElement("p");t.innerHTML=`<b>${e.toUpperCase()}</b>: ${n[e]}`,s.appendChild(t)}s.addEventListener("click",()=>{s.classList.remove("is-show-info")})},i=document.getElementById("main-trash"),n=document.getElementById("list-nav-table"),d=e=>{const d=document.getElementById("table-list");if(d.getElementsByTagName("tr").length>=1){const e=document.querySelectorAll("tr"),t=e.length-1,s=n.children.length-1;for(let s=t;s>=1;s--)e[s].remove();for(let e=s;e>=1;e--)e!=s&&n.children[e].remove()}for(let n=0;n<=(Array.isArray(e)?e.length-1:0);n++){let l=0;const a=document.createElement("tr");let c=Array.isArray(e)?Object.values(e[n]):Object.values(e);const r=document.createElement("td"),o=document.createElement("td"),h=document.createElement("td"),m=document.createElement("td"),g=document.createElement("td"),u=document.createElement("td"),L=document.createElement("td"),f=document.createElement("button"),p=document.createElement("td"),v=document.createElement("input"),E=document.createElement("label");v.setAttribute("type","checkbox"),v.classList.add("checkbox-table"),f.innerHTML='<i class="fas fa-trash"></i>',f.classList.add("table-btn","table-btn-delete");for(let t in Array.isArray(e)?e[n]:e)"id"===t?(a.setAttribute("id",""+c[l]),r.innerHTML=c[l]):"firstName"===t?(o.innerHTML=c[l],v.setAttribute("id",""+c[l]),v.setAttribute("firstName",""+l),E.setAttribute("for",""+c[l])):"lastName"===t?h.innerHTML=c[l]:"email"===t?m.innerHTML=c[l]:"phone"===t?g.innerHTML=c[l]:"adress"===t&&(u.innerHTML=c[l].state),l++;n>19&&a.classList.toggle("is-hidden-td"),L.appendChild(f),p.appendChild(v),p.appendChild(E),a.appendChild(p),a.appendChild(r),a.appendChild(o),a.appendChild(h),a.appendChild(m),a.appendChild(g),a.appendChild(u),a.appendChild(L),d.insertBefore(a,d.children[n+1]),p.addEventListener("change",()=>{const e=document.querySelectorAll("tr");let t=[];for(let s=1;s<=e.length-1;s++)t.push(e[s].children[0].children[0].checked);t.every(e=>1==e)?e[0].children[0].children[0].checked=!0:e[0].children[0].children[0].checked=!1,t.some(e=>1==e)&&!i.classList.contains("id-disabled")?i.classList.remove("is-disabled"):i.classList.add("is-disabled")}),f.addEventListener("click",s=>{"TR"===s.path[3].tagName?t(s.path[3].id,e):t(s.path[2].id,e)}),a.addEventListener("click",t=>{if("I"!=t.target.tagName&&"LABEL"!=t.target.tagName&&"INPUT"!=t.target.tagName){const t=document.getElementsByTagName("main")[0].offsetHeight,i=document.getElementById("window-info").offsetHeight;window.scroll(0,t+i),s(a.id,e)}})}(async e=>{let t=1;for(let s=0;s<=(Array.isArray(e)?e.length-1:0);s++){const e=document.createElement("li");s%20==0&&(e.classList.add("nav-item"),e.innerHTML=t,e.id="item-"+t,1==t&&e.classList.add("is-active-item"),n.children[t].insertAdjacentElement("beforebegin",e),t++,e.addEventListener("click",e=>{const t=e.target.id.toString().slice(-1),s=document.querySelectorAll("tr");if(n.children.length>3){for(let e=0;e<=n.children.length-1;e++)n.children[e].classList.remove("is-active-item"),e==t&&n.children[t].classList.add("is-active-item");for(let e=1;e<=s.length;e++)if(s[0].classList.contains("is-hidden-td")&&s[0].classList.toggle("is-hidden-td"),e>=20*t&&e<=20*t+19&&1!=t?(s[e-1].classList.add("is-hidden-td"),s[e-1].classList.remove("is-hidden-td")):s[e-1].classList.contains("is-hidden-td")||s[e-1].classList.toggle("is-hidden-td"),1==t)for(let e=0;e<=19;e++)s[e+1].classList.add("is-hidden-td"),s[e+1].classList.remove("is-hidden-td")}}))}})(e)},l=(e,t,s)=>{let i=t.sort((function(t,i){return 2==s?"state"==e?t.adress.state<i.adress.state?-1:t.adress.state>i.adress.state?1:0:t[e]<i[e]?-1:t[e]>i[e]?1:0:3==s?"state"==e?t.adress.state>i.adress.state?1:t.adress.state<i.adress.state?-1:0:t[e]<i[e]?1:t[e]>i[e]?-1:0:void 0}));d(i)},a=document.getElementById("selector-state"),c=async e=>{try{await fetch("https://itrex-react-lab-files.s3.eu-central-1.amazonaws.com/react-test-api.json").then(e=>e.json()).then(e=>{d(e),L(e),(async e=>{const t=[];for(let s=0;s<=e.length-1;s++)for(let i in e[s])"adress"==i&&(t.includes(e[s][i].state)||t.push(e[s][i].state));t.forEach(e=>{let t=document.createElement("option");t.innerHTML=e,a.appendChild(t)});let s=document.createElement("option");s.innerHTML="Nothing",a.prepend(s),a.value="Nothing"})(e)})}catch(e){console.log(e)}},r=document.getElementById("filter-firstName"),o=document.getElementById("selector-state"),h=document.getElementById("main-trash"),m=document.getElementById("list-nav-table"),g=document.querySelectorAll(".is-sort");let u=2;const L=async s=>{r.addEventListener("input",t=>{const i=t.target.value;d(e(i.toLowerCase(),s,"firstName"))}),o.addEventListener("change",t=>{const i=t.target.value;let n=[];"Nothing"!=t.target.value?(n=e(i,s,"adress"),d(n)):d(s)}),h.addEventListener("click",()=>{const e=document.querySelectorAll("tr");let s=[],i=[];for(let t=1;t<=e.length-1;t++)s.push(e[t].children[0].children[0].checked),e[t].children[0].children[0].checked&&i.push(e[t].id);s.some(e=>1==e)&&t(void 0,i)}),document.querySelector("#checkbox-main").addEventListener("click",e=>{const t=document.querySelectorAll("tr");e.path[0].checked?(t.forEach(e=>{e.classList.contains("is-hidden-td")||(e.children[0].children[0].checked=!0)}),h.classList.remove("is-disabled")):(t.forEach(e=>e.children[0].children[0].checked=!1),h.classList.add("is-disabled"))}),m.children[m.children.length-1].addEventListener("click",()=>{let e;if(m.children.length>3){for(let t=0;t<=m.children.length-1;t++){if(m.children[m.children.length-2].classList.contains("is-active-item")){e=m.children[m.children.length-2].id.toString().slice(-1);break}m.children[t].classList.contains("is-active-item")&&(e=t+1)}for(let t=0;t<=m.children.length-1;t++)m.children[t].classList.remove("is-active-item"),t==e&&m.children[e].classList.add("is-active-item");for(let t=0;t<=s.length-1;t++)if(t%20==0){const t=document.querySelectorAll("tr");for(let t=0;t<=m.children.length-1;t++)m.children[t].classList.remove("is-active-item"),t==e&&m.children[e].classList.add("is-active-item");for(let s=1;s<=t.length;s++)if(t[0].classList.contains("is-hidden-td")&&t[0].classList.toggle("is-hidden-td"),s>=20*e&&s<=20*e+19&&1!=e?(t[s-1].classList.add("is-hidden-td"),t[s-1].classList.remove("is-hidden-td")):t[s-1].classList.contains("is-hidden-td")||t[s-1].classList.toggle("is-hidden-td"),1==e)for(let e=0;e<=4;e++)t[e+1].classList.add("is-hidden-td"),t[e+1].classList.remove("is-hidden-td")}}}),m.children[0].addEventListener("click",()=>{let e;if(m.children.length>3){for(let t=0;t<=m.children.length-1;t++){if(m.children[1].classList.contains("is-active-item")){e=m.children[1].id.toString().slice(-1);break}m.children[t].classList.contains("is-active-item")&&(e=t-1)}for(let t=0;t<=m.children.length-1;t++)m.children[t].classList.remove("is-active-item"),t==e&&m.children[e].classList.add("is-active-item");for(let t=0;t<=s.length-1;t++)if(t%20==0){const t=document.querySelectorAll("tr");for(let t=0;t<=m.children.length-1;t++)m.children[t].classList.remove("is-active-item"),t==e&&m.children[e].classList.add("is-active-item");for(let s=1;s<=t.length;s++)if(t[0].classList.contains("is-hidden-td")&&t[0].classList.toggle("is-hidden-td"),s>=20*e&&s<=20*e+19&&1!=e?(t[s-1].classList.add("is-hidden-td"),t[s-1].classList.remove("is-hidden-td")):t[s-1].classList.contains("is-hidden-td")||t[s-1].classList.toggle("is-hidden-td"),1==e)for(let e=0;e<=19;e++)t[e+1].classList.add("is-hidden-td"),t[e+1].classList.remove("is-hidden-td")}}}),g.forEach(e=>{e.addEventListener("click",t=>{const i=t.currentTarget.innerHTML;let n=i.charAt(0).toLowerCase()+i.substring(0,i.indexOf("<")).slice(1).replace(/\s/g,"");g.forEach(e=>{(e.getElementsByTagName("i")[0].classList.contains("fa-arrow-up")||e.getElementsByTagName("i")[0].classList.contains("fa-arrow-down"))&&(e.getElementsByTagName("i")[0].className="fas")}),4==u||1==u?(c(),u=2):3==u?(e.getElementsByTagName("i")[0].className="fas fa-arrow-up",l(n,s,u),u++):2==u&&(l(n,s,u),u++,e.getElementsByTagName("i")[0].className="fas fa-arrow-down")})})};return L}();

//# sourceMappingURL=data:application/json;charset=utf8;base64,
