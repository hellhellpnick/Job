(function () {
  'use strict';

  let timeBegan = null; // did the clock start?

  let timeStopped = null; // at what time was the timer stopped?

  let stoppedDuration = 0; // how long was the timer stopped?

  let startInterval = null; // this is needed to stop the startInterva() method

  let flag = false; // to control the start/stop of the timer

  const startTimer = () => {
    if (timeBegan === null) timeBegan = new Date();
    if (timeStopped !== null) stoppedDuration += new Date() - timeStopped;
    startInterval = setInterval(clockRunning, 10);
  };

  const stopTimer = () => {
    timeStopped = new Date();
    clearInterval(startInterval);
  };

  const clockRunning = () => {
    let currentTime = new Date();
    let timeElapsed = new Date(currentTime - timeBegan - stoppedDuration);
    let minutes = timeElapsed.getUTCMinutes();
    let seconds = timeElapsed.getUTCSeconds();
    let milliseconds = timeElapsed.getUTCMilliseconds();
    milliseconds = Math.floor(milliseconds / 10);
    document.querySelector('#timer_display').textContent = (minutes = minutes < 10 ? '0' + minutes : minutes) + ':' + (seconds = seconds < 10 ? '0' + seconds : seconds) + ':' + (milliseconds = milliseconds < 10 ? '0' + milliseconds : milliseconds);
  };

  const resetTimer = () => {
    clearInterval(startInterval);
    timeBegan = null;
    timeStopped = null;
    stoppedDuration = 0;
    document.querySelector('#timer_display').innerHTML = '00:00:00';
    flag = false;
  };

  document.querySelector('.container').addEventListener('click', () => {
    if (!flag) {
      startTimer();
      flag = true;
    } else {
      stopTimer();
      flag = false;
    }
  });
  document.querySelector('.container').addEventListener('dblclick', () => {
    resetTimer();
  });

}());

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbInNyYy9qcy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgdGltZUJlZ2FuID0gbnVsbDsgLy8gZGlkIHRoZSBjbG9jayBzdGFydD9cclxubGV0IHRpbWVTdG9wcGVkID0gbnVsbDsgLy8gYXQgd2hhdCB0aW1lIHdhcyB0aGUgdGltZXIgc3RvcHBlZD9cclxubGV0IHN0b3BwZWREdXJhdGlvbiA9IDA7IC8vIGhvdyBsb25nIHdhcyB0aGUgdGltZXIgc3RvcHBlZD9cclxubGV0IHN0YXJ0SW50ZXJ2YWwgPSBudWxsOyAvLyB0aGlzIGlzIG5lZWRlZCB0byBzdG9wIHRoZSBzdGFydEludGVydmEoKSBtZXRob2RcclxubGV0IGZsYWcgPSBmYWxzZTsgLy8gdG8gY29udHJvbCB0aGUgc3RhcnQvc3RvcCBvZiB0aGUgdGltZXJcclxuXHJcbmNvbnN0IHN0YXJ0VGltZXIgPSAoKSA9PiB7XHJcbiAgaWYgKHRpbWVCZWdhbiA9PT0gbnVsbCkgdGltZUJlZ2FuID0gbmV3IERhdGUoKTtcclxuXHJcbiAgaWYgKHRpbWVTdG9wcGVkICE9PSBudWxsKSBzdG9wcGVkRHVyYXRpb24gKz0gbmV3IERhdGUoKSAtIHRpbWVTdG9wcGVkO1xyXG5cclxuICBzdGFydEludGVydmFsID0gc2V0SW50ZXJ2YWwoY2xvY2tSdW5uaW5nLCAxMCk7XHJcbn07XHJcblxyXG5jb25zdCBzdG9wVGltZXIgPSAoKSA9PiB7XHJcbiAgdGltZVN0b3BwZWQgPSBuZXcgRGF0ZSgpO1xyXG4gIGNsZWFySW50ZXJ2YWwoc3RhcnRJbnRlcnZhbCk7XHJcbn07XHJcblxyXG5jb25zdCBjbG9ja1J1bm5pbmcgPSAoKSA9PiB7XHJcbiAgbGV0IGN1cnJlbnRUaW1lID0gbmV3IERhdGUoKTtcclxuICBsZXQgdGltZUVsYXBzZWQgPSBuZXcgRGF0ZShjdXJyZW50VGltZSAtIHRpbWVCZWdhbiAtIHN0b3BwZWREdXJhdGlvbik7XHJcblxyXG4gIGxldCBtaW51dGVzID0gdGltZUVsYXBzZWQuZ2V0VVRDTWludXRlcygpO1xyXG4gIGxldCBzZWNvbmRzID0gdGltZUVsYXBzZWQuZ2V0VVRDU2Vjb25kcygpO1xyXG4gIGxldCBtaWxsaXNlY29uZHMgPSB0aW1lRWxhcHNlZC5nZXRVVENNaWxsaXNlY29uZHMoKTtcclxuXHJcbiAgbWlsbGlzZWNvbmRzID0gTWF0aC5mbG9vcihtaWxsaXNlY29uZHMgLyAxMCk7XHJcblxyXG4gIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyN0aW1lcl9kaXNwbGF5JykudGV4dENvbnRlbnQgPVxyXG4gICAgKG1pbnV0ZXMgPSBtaW51dGVzIDwgMTAgPyAnMCcgKyBtaW51dGVzIDogbWludXRlcykgK1xyXG4gICAgJzonICtcclxuICAgIChzZWNvbmRzID0gc2Vjb25kcyA8IDEwID8gJzAnICsgc2Vjb25kcyA6IHNlY29uZHMpICtcclxuICAgICc6JyArXHJcbiAgICAobWlsbGlzZWNvbmRzID0gbWlsbGlzZWNvbmRzIDwgMTAgPyAnMCcgKyBtaWxsaXNlY29uZHMgOiBtaWxsaXNlY29uZHMpO1xyXG59O1xyXG5cclxuY29uc3QgcmVzZXRUaW1lciA9ICgpID0+IHtcclxuICBjbGVhckludGVydmFsKHN0YXJ0SW50ZXJ2YWwpO1xyXG4gIHRpbWVCZWdhbiA9IG51bGw7XHJcbiAgdGltZVN0b3BwZWQgPSBudWxsO1xyXG4gIHN0b3BwZWREdXJhdGlvbiA9IDA7XHJcbiAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3RpbWVyX2Rpc3BsYXknKS5pbm5lckhUTUwgPSAnMDA6MDA6MDAnO1xyXG4gIGZsYWcgPSBmYWxzZTtcclxufTtcclxuXHJcbmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jb250YWluZXInKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICBpZiAoIWZsYWcpIHtcclxuICAgIHN0YXJ0VGltZXIoKTtcclxuICAgIGZsYWcgPSB0cnVlO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBzdG9wVGltZXIoKTtcclxuICAgIGZsYWcgPSBmYWxzZTtcclxuICB9XHJcbn0pO1xyXG5cclxuZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNvbnRhaW5lcicpLmFkZEV2ZW50TGlzdGVuZXIoJ2RibGNsaWNrJywgKCkgPT4ge1xyXG4gIHJlc2V0VGltZXIoKTtcclxufSk7XHJcbiJdLCJuYW1lcyI6WyJ0aW1lQmVnYW4iLCJ0aW1lU3RvcHBlZCIsInN0b3BwZWREdXJhdGlvbiIsInN0YXJ0SW50ZXJ2YWwiLCJmbGFnIiwic3RhcnRUaW1lciIsIkRhdGUiLCJzZXRJbnRlcnZhbCIsImNsb2NrUnVubmluZyIsInN0b3BUaW1lciIsImNsZWFySW50ZXJ2YWwiLCJjdXJyZW50VGltZSIsInRpbWVFbGFwc2VkIiwibWludXRlcyIsImdldFVUQ01pbnV0ZXMiLCJzZWNvbmRzIiwiZ2V0VVRDU2Vjb25kcyIsIm1pbGxpc2Vjb25kcyIsImdldFVUQ01pbGxpc2Vjb25kcyIsIk1hdGgiLCJmbG9vciIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsInRleHRDb250ZW50IiwicmVzZXRUaW1lciIsImlubmVySFRNTCIsImFkZEV2ZW50TGlzdGVuZXIiXSwibWFwcGluZ3MiOiI7OztFQUFBLElBQUlBLFNBQVMsR0FBRyxJQUFoQjs7RUFDQSxJQUFJQyxXQUFXLEdBQUcsSUFBbEI7O0VBQ0EsSUFBSUMsZUFBZSxHQUFHLENBQXRCOztFQUNBLElBQUlDLGFBQWEsR0FBRyxJQUFwQjs7RUFDQSxJQUFJQyxJQUFJLEdBQUcsS0FBWDs7RUFFQSxNQUFNQyxVQUFVLEdBQUcsTUFBTTtFQUN2QixNQUFJTCxTQUFTLEtBQUssSUFBbEIsRUFBd0JBLFNBQVMsR0FBRyxJQUFJTSxJQUFKLEVBQVo7RUFFeEIsTUFBSUwsV0FBVyxLQUFLLElBQXBCLEVBQTBCQyxlQUFlLElBQUksSUFBSUksSUFBSixLQUFhTCxXQUFoQztFQUUxQkUsRUFBQUEsYUFBYSxHQUFHSSxXQUFXLENBQUNDLFlBQUQsRUFBZSxFQUFmLENBQTNCO0VBQ0QsQ0FORDs7RUFRQSxNQUFNQyxTQUFTLEdBQUcsTUFBTTtFQUN0QlIsRUFBQUEsV0FBVyxHQUFHLElBQUlLLElBQUosRUFBZDtFQUNBSSxFQUFBQSxhQUFhLENBQUNQLGFBQUQsQ0FBYjtFQUNELENBSEQ7O0VBS0EsTUFBTUssWUFBWSxHQUFHLE1BQU07RUFDekIsTUFBSUcsV0FBVyxHQUFHLElBQUlMLElBQUosRUFBbEI7RUFDQSxNQUFJTSxXQUFXLEdBQUcsSUFBSU4sSUFBSixDQUFTSyxXQUFXLEdBQUdYLFNBQWQsR0FBMEJFLGVBQW5DLENBQWxCO0VBRUEsTUFBSVcsT0FBTyxHQUFHRCxXQUFXLENBQUNFLGFBQVosRUFBZDtFQUNBLE1BQUlDLE9BQU8sR0FBR0gsV0FBVyxDQUFDSSxhQUFaLEVBQWQ7RUFDQSxNQUFJQyxZQUFZLEdBQUdMLFdBQVcsQ0FBQ00sa0JBQVosRUFBbkI7RUFFQUQsRUFBQUEsWUFBWSxHQUFHRSxJQUFJLENBQUNDLEtBQUwsQ0FBV0gsWUFBWSxHQUFHLEVBQTFCLENBQWY7RUFFQUksRUFBQUEsUUFBUSxDQUFDQyxhQUFULENBQXVCLGdCQUF2QixFQUF5Q0MsV0FBekMsR0FDRSxDQUFDVixPQUFPLEdBQUdBLE9BQU8sR0FBRyxFQUFWLEdBQWUsTUFBTUEsT0FBckIsR0FBK0JBLE9BQTFDLElBQ0EsR0FEQSxJQUVDRSxPQUFPLEdBQUdBLE9BQU8sR0FBRyxFQUFWLEdBQWUsTUFBTUEsT0FBckIsR0FBK0JBLE9BRjFDLElBR0EsR0FIQSxJQUlDRSxZQUFZLEdBQUdBLFlBQVksR0FBRyxFQUFmLEdBQW9CLE1BQU1BLFlBQTFCLEdBQXlDQSxZQUp6RCxDQURGO0VBTUQsQ0FoQkQ7O0VBa0JBLE1BQU1PLFVBQVUsR0FBRyxNQUFNO0VBQ3ZCZCxFQUFBQSxhQUFhLENBQUNQLGFBQUQsQ0FBYjtFQUNBSCxFQUFBQSxTQUFTLEdBQUcsSUFBWjtFQUNBQyxFQUFBQSxXQUFXLEdBQUcsSUFBZDtFQUNBQyxFQUFBQSxlQUFlLEdBQUcsQ0FBbEI7RUFDQW1CLEVBQUFBLFFBQVEsQ0FBQ0MsYUFBVCxDQUF1QixnQkFBdkIsRUFBeUNHLFNBQXpDLEdBQXFELFVBQXJEO0VBQ0FyQixFQUFBQSxJQUFJLEdBQUcsS0FBUDtFQUNELENBUEQ7O0VBU0FpQixRQUFRLENBQUNDLGFBQVQsQ0FBdUIsWUFBdkIsRUFBcUNJLGdCQUFyQyxDQUFzRCxPQUF0RCxFQUErRCxNQUFNO0VBQ25FLE1BQUksQ0FBQ3RCLElBQUwsRUFBVztFQUNUQyxJQUFBQSxVQUFVO0VBQ1ZELElBQUFBLElBQUksR0FBRyxJQUFQO0VBQ0QsR0FIRCxNQUdPO0VBQ0xLLElBQUFBLFNBQVM7RUFDVEwsSUFBQUEsSUFBSSxHQUFHLEtBQVA7RUFDRDtFQUNGLENBUkQ7RUFVQWlCLFFBQVEsQ0FBQ0MsYUFBVCxDQUF1QixZQUF2QixFQUFxQ0ksZ0JBQXJDLENBQXNELFVBQXRELEVBQWtFLE1BQU07RUFDdEVGLEVBQUFBLFVBQVU7RUFDWCxDQUZEOzs7OyJ9
