var sortListTable=function(){"use strict";const e=async(e,t)=>{const n=document.createElement("div"),d=document.createElement("button"),s=document.createElement("button"),i=document.createElement("p"),a=document.createElement("form"),l=document.getElementsByTagName("body")[0];n.classList.add("position-center","box-column"),s.classList.add("form-add-btn"),d.classList.add("form-add-btn"),i.innerHTML="Are you sure to delete?",d.innerHTML="Ok",s.innerHTML="Close",n.appendChild(i),n.appendChild(a),a.appendChild(d),a.appendChild(s),document.getElementsByTagName("body")[0].appendChild(n),l.classList.toggle("is-dont-point-event"),a.addEventListener("submit",d=>{d.preventDefault();const s=document.querySelectorAll("tr");for(let n=1;n<=s.length-1;n++)e?s[n].id===e&&(t.unshift(s[n].id),s[n].remove()):s[n].children[0].children[0].checked&&(t.unshift(s[n].id),s[n].remove());n.remove(),l.classList.toggle("is-dont-point-event"),document.querySelector("#checkbox-main").checked=!1}),s.addEventListener("click",()=>{n.remove(),l.classList.toggle("is-dont-point-event")})},t=(e,t)=>{const n=document.getElementById("window-info"),d=document.createElement("h2");n.innerHTML="",d.innerHTML="Portfolio",d.className="modal-title",n.appendChild(d),n.classList.contains("is-show-info")||n.classList.add("is-show-info");const s=t.find(t=>{if(t.id==e)return t});for(let e in s)if("adress"==e)for(let t in s[e]){let d=document.createElement("p");d.innerHTML=`<b>${t.toUpperCase()}</b>: ${s[e][t]}`,n.appendChild(d)}else{let t=document.createElement("p");t.innerHTML=`<b>${e.toUpperCase()}</b>: ${s[e]}`,n.appendChild(t)}n.addEventListener("click",()=>{n.classList.remove("is-show-info")})},n=document.getElementById("main-trash"),d=document.getElementById("list-nav-table"),s=s=>{const i=document.getElementById("table-list");if(i.getElementsByTagName("tr").length>=1){const e=document.querySelectorAll("tr"),t=e.length-1,n=d.children.length-1;for(let n=t;n>=1;n--)e[n].remove();for(let e=n;e>=1;e--)e!=n&&d.children[e].remove()}for(let d=0;d<=(Array.isArray(s)?s.length-1:0);d++){let a=0;const l=document.createElement("tr");let r=Array.isArray(s)?Object.values(s[d]):Object.values(s);const c=document.createElement("td"),o=document.createElement("td"),m=document.createElement("td"),h=document.createElement("td"),u=document.createElement("td"),p=document.createElement("td"),L=document.createElement("td"),g=document.createElement("button"),f=document.createElement("td"),E=document.createElement("input"),b=document.createElement("label");E.setAttribute("type","checkbox"),E.classList.add("checkbox-table"),g.innerHTML='<i class="fas fa-trash"></i>',g.classList.add("table-btn","table-btn-delete");for(let e in Array.isArray(s)?s[d]:s)"id"===e?(l.setAttribute("id",""+r[a]),c.innerHTML=r[a]):"firstName"===e?(o.innerHTML=r[a],E.setAttribute("id",""+r[a]),E.setAttribute("firstName",""+a),b.setAttribute("for",""+r[a])):"lastName"===e?m.innerHTML=r[a]:"email"===e?h.innerHTML=r[a]:"phone"===e?u.innerHTML=r[a]:"adress"===e&&(p.innerHTML=r[a].state),a++;d>19&&l.classList.toggle("is-hidden-td"),L.appendChild(g),f.appendChild(E),f.appendChild(b),l.appendChild(f),l.appendChild(c),l.appendChild(o),l.appendChild(m),l.appendChild(h),l.appendChild(u),l.appendChild(p),l.appendChild(L),i.insertBefore(l,i.children[d+1]),f.addEventListener("change",()=>{const e=document.querySelectorAll("tr");let t=[];for(let n=1;n<=e.length-1;n++)t.push(e[n].children[0].children[0].checked);t.every(e=>1==e)?e[0].children[0].children[0].checked=!0:e[0].children[0].children[0].checked=!1,t.some(e=>1==e)&&!n.classList.contains("id-disabled")?n.classList.remove("is-disabled"):n.classList.add("is-disabled")}),g.addEventListener("click",t=>{"TR"===t.path[3].tagName?e(t.path[3].id,s):e(t.path[2].id,s)}),l.addEventListener("click",e=>{if("I"!=e.target.tagName&&"LABEL"!=e.target.tagName&&"INPUT"!=e.target.tagName){const e=document.getElementsByTagName("main")[0].offsetHeight,n=document.getElementById("window-info").offsetHeight;window.scroll(0,e+n),t(l.id,s)}})}(async e=>{let t=1;for(let n=0;n<=(Array.isArray(e)?e.length-1:0);n++){const e=document.createElement("li");n%20==0&&(e.classList.add("nav-item"),e.innerHTML=t,e.id="item-"+t,1==t&&e.classList.add("is-active-item"),d.children[t].insertAdjacentElement("beforebegin",e),t++,e.addEventListener("click",e=>{const t=e.target.id.toString().slice(-1),n=document.querySelectorAll("tr");if(d.children.length>3){for(let e=0;e<=d.children.length-1;e++)d.children[e].classList.remove("is-active-item"),e==t&&d.children[t].classList.add("is-active-item");for(let e=1;e<=n.length;e++)if(n[0].classList.contains("is-hidden-td")&&n[0].classList.toggle("is-hidden-td"),e>=20*t&&e<=20*t+19&&1!=t?(n[e-1].classList.add("is-hidden-td"),n[e-1].classList.remove("is-hidden-td")):n[e-1].classList.contains("is-hidden-td")||n[e-1].classList.toggle("is-hidden-td"),1==t)for(let e=0;e<=19;e++)n[e+1].classList.add("is-hidden-td"),n[e+1].classList.remove("is-hidden-td")}}))}})(s)};return(e,t,n)=>{let d=t.sort((function(t,d){return 2==n?"state"==e?t.adress.state<d.adress.state?-1:t.adress.state>d.adress.state?1:0:t[e]<d[e]?-1:t[e]>d[e]?1:0:3==n?"state"==e?t.adress.state>d.adress.state?1:t.adress.state<d.adress.state?-1:0:t[e]<d[e]?1:t[e]>d[e]?-1:0:void 0}));s(d)}}();

//# sourceMappingURL=data:application/json;charset=utf8;base64,
